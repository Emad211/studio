{
  "projects": [
    {
      "title": "Deep Learning for Brain MRI Classification",
      "title_fa": "طبقه‌بندی MRI مغز با یادگیری عمیق",
      "slug": "deep-learning-brain-mri",
      "categories": [
        "AI Model Development",
        "Data Analysis & Statistics"
      ],
      "categories_fa": [
        "توسعه مدل‌های هوش مصنوعی",
        "تحلیل داده و آمار"
      ],
      "description": "Utilizing advanced Deep Learning models (CNN, EfficientNet, ResNet, VGG16) to classify brain tumor MRI scans with high accuracy.",
      "description_fa": "استفاده از مدل‌های پیشرفته یادگیری عمیق (CNN، EfficientNet، ResNet، VGG16) برای طبقه‌بندی تصاویر MRI تومور مغزی با دقت بالا.",
      "image": "https://res.cloudinary.com/dnoeudkfc/image/upload/v1755640239/profile-pic2_lpvymc.jpg",
      "tags": [
        "Deep Learning",
        "TensorFlow",
        "Keras",
        "Python",
        "Computer Vision",
        "Brain MRI"
      ],
      "links": {
        "github": "https://github.com/Emad211/Deep-Learning-for-Brain-MRI-Classification",
        "live": ""
      },
      "showcaseType": "links",
      "gallery": [],
      "aiPromptContext": "",
      "about": "This project explores various Deep Learning models for the critical task of Brain MRI Tumor Classification. Using the Brain Tumor MRI Scans dataset from Kaggle, multiple neural network architectures including custom CNNs, EfficientNet, ResNet, and VGG16 are implemented and compared to classify images into tumor and non-tumor categories accurately.",
      "about_fa": "این پروژه به بررسی مدل‌های مختلف یادگیری عمیق برای وظیفه حیاتی طبقه‌بندی تومور در تصاویر MRI مغز می‌پردازد. با استفاده از مجموعه داده اسکن‌های MRI تومور مغزی از Kaggle، چندین معماری شبکه عصبی شامل CNN سفارشی، EfficientNet، ResNet و VGG16 پیاده‌سازی و مقایسه شده‌اند تا تصاویر را با دقت به دسته‌های دارای تومور و بدون تومور طبقه‌بندی کنند.",
      "technical_details": "The implementation uses TensorFlow and Keras to build and train the models. Data is efficiently loaded and preprocessed using `image_dataset_from_directory`. Advanced training techniques like EarlyStopping, ReduceLROnPlateau, and ModelCheckpoint are applied for optimization, and TensorBoard is used for real-time monitoring. Performance is evaluated using Confusion Matrices and Classification Reports.",
      "technical_details_fa": "پیاده‌سازی با استفاده از TensorFlow و Keras برای ساخت و آموزش مدل‌ها انجام شده است. داده‌ها با استفاده از `image_dataset_from_directory` به طور کارآمد بارگذاری و پیش‌پردازش می‌شوند. تکنیک‌های پیشرفته آموزشی مانند EarlyStopping، ReduceLROnPlateau و ModelCheckpoint برای بهینه‌سازی اعمال شده و از TensorBoard برای نظارت آنی بر فرآیند آموزش استفاده می‌شود. عملکرد با استفاده از ماتریس درهم‌ریختگی و گزارش طبقه‌بندی ارزیابی می‌گردد.",
      "challenges": "A key challenge was to effectively compare the performance of different complex architectures on the given dataset. This required a systematic approach to training, fine-tuning, and evaluating each model under similar conditions to ensure a fair comparison. Another challenge was interpreting the model's decisions, which was addressed using visualization techniques like Grad-CAM.",
      "challenges_fa": "یک چالش کلیدی، مقایسه مؤثر عملکرد معماری‌های پیچیده مختلف بر روی مجموعه داده موجود بود. این امر نیازمند یک رویکرد سیستماتیک برای آموزش، تنظیم دقیق و ارزیابی هر مدل تحت شرایط مشابه برای اطمینان از یک مقایسه منصفانه بود. چالش دیگر، تفسیر تصمیمات مدل بود که با استفاده از تکنیک‌های مصورسازی مانند Grad-CAM به آن پرداخته شد.",
      "solution": "By implementing a structured workflow in a Jupyter Notebook, each model was trained and evaluated methodically. The results, including accuracy, loss, and confusion matrices, were analyzed to determine the best-performing architecture for this specific task. The use of Grad-CAM provided valuable insights into which regions of the MRI scans the models were focusing on, enhancing the explainability of the results.",
      "solution_fa": "با پیاده‌سازی یک گردش کار ساختاریافته در یک نوتبوک جوپیتر، هر مدل به صورت روشمند آموزش و ارزیابی شد. نتایج، شامل دقت، خطا و ماتریس‌های درهم‌ریختگی، تحلیل شدند تا بهترین معماری برای این وظیفه خاص مشخص شود. استفاده از Grad-CAM بینش‌های ارزشمندی در مورد اینکه مدل‌ها بر روی کدام نواحی از اسکن‌های MRI تمرکز می‌کنند، فراهم آورد و قابلیت توضیح‌پذیری نتایج را افزایش داد.",
      "code_snippet": "def build_model(base_model_class, input_shape=(224, 224, 3), num_classes=4, dropout_rate=0.3):\n    inputs = layers.Input(shape=input_shape)\n    base_model = base_model_class(include_top=False, input_tensor=inputs, weights='imagenet')\n    base_model.trainable = False\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = BatchNormalization()(x)\n    x = Dropout(dropout_rate)(x)\n    outputs = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs, outputs)\n    return model",
      "code_snippet_fa": "def build_model(base_model_class, input_shape=(224, 224, 3), num_classes=4, dropout_rate=0.3):\n    inputs = layers.Input(shape=input_shape)\n    base_model = base_model_class(include_top=False, input_tensor=inputs, weights='imagenet')\n    base_model.trainable = False\n    x = base_model.output\n    x = GlobalAveragePooling2D()(x)\n    x = BatchNormalization()(x)\n    x = Dropout(dropout_rate)(x)\n    outputs = Dense(num_classes, activation='softmax')(x)\n    model = Model(inputs, outputs)\n    return model"
    },
    {
      "title": "AI-Powered E-commerce Platform",
      "title_fa": "پلتفرم فروشگاهی مجهز به هوش مصنوعی",
      "slug": "ai-ecommerce-platform",
      "categories": [
        "Web Development & Design",
        "AI Model Development"
      ],
      "categories_fa": [
        "توسعه و طراحی وب",
        "توسعه مدل‌های هوش مصنوعی"
      ],
      "description": "A full-featured e-commerce platform using AI for personalized recommendations and a complete admin dashboard.",
      "description_fa": "یک پلتفرم فروشگاهی کامل با استفاده از هوش مصنوعی برای پیشنهادهای شخصی‌سازی شده و یک داشبورد مدیریت جامع.",
      "image": "https://placehold.co/600x400.png",
      "tags": [
        "Next.js",
        "React",
        "TypeScript",
        "Generative AI",
        "PostgreSQL",
        "Admin Panel"
      ],
      "links": {
        "github": "https://github.com/Emad211",
        "live": "#"
      },
      "showcaseType": "links",
      "gallery": [],
      "aiPromptContext": "",
      "about": "This project is an advanced e-commerce platform that leverages AI to create a personalized shopping experience. The system analyzes user behavior to provide tailored product recommendations, increasing engagement and sales. It includes a comprehensive admin dashboard for managing products, users, and orders.",
      "about_fa": "این پروژه یک پلتفرم فروشگاهی پیشرفته است که از هوش مصنوعی برای ایجاد تجربه خرید شخصی‌سازی شده بهره می‌برد. سیستم با تحلیل رفتار کاربر، پیشنهادهای محصول متناسب ارائه می‌دهد که منجر به افزایش تعامل و فروش می‌شود. این پلتفرم شامل یک داشبورد مدیریت جامع برای مدیریت محصولات، کاربران و سفارشات است.",
      "technical_details": "The frontend is built with Next.js and React, utilizing server-side rendering for optimal performance. The backend is a Node.js server with a PostgreSQL database to handle complex queries. The recommendation engine is a custom model developed with TensorFlow, served via a Flask API.",
      "technical_details_fa": "فرانت‌اند با Next.js و React ساخته شده و از رندر سمت سرور برای عملکرد بهینه استفاده می‌کند. بک‌اند یک سرور Node.js با پایگاه داده PostgreSQL برای مدیریت کوئری‌های پیچیده است. موتور پیشنهاددهنده یک مدل سفارشی توسعه‌داده‌شده با TensorFlow است که از طریق یک Flask API سرویس‌دهی می‌شود.",
      "challenges": "One of the main challenges was integrating the AI model with the real-time user data stream without affecting site performance. We implemented a message queue system with RabbitMQ to process data asynchronously.",
      "challenges_fa": "یکی از چالش‌های اصلی، یکپارچه‌سازی مدل هوش مصنوعی با جریان داده آنی کاربران بدون تأثیر منفی بر عملکرد سایت بود. ما یک سیستم صف پیام با RabbitMQ برای پردازش غیرهمزمان داده‌ها پیاده‌سازی کردیم.",
      "solution": "The asynchronous architecture allowed us to decouple the recommendation engine from the main application, ensuring scalability and responsiveness. The AI model updates personalized recommendations in near real-time without blocking user interactions.",
      "solution_fa": "معماری غیرهمزمان به ما اجازه داد تا موتور پیشنهاددهنده را از برنامه اصلی جدا کنیم و مقیاس‌پذیری و واکنش‌گرایی را تضمین کنیم. مدل هوش مصنوعی پیشنهادهای شخصی‌سازی‌شده را تقریباً در لحظه و بدون مسدود کردن تعاملات کاربر به‌روز می‌کند.",
      "code_snippet": "import { RecommendationEngine } from '@/lib/ai/ecommerce';",
      "code_snippet_fa": "import { RecommendationEngine } from '@/lib/ai/ecommerce';"
    },
    {
      "title": "Intelligent Task Management App",
      "title_fa": "اپلیکیشن هوشمند مدیریت وظایف",
      "slug": "intelligent-task-app",
      "categories": [
        "AI Agent Development",
        "Web Development & Design"
      ],
      "categories_fa": [
        "توسعه ایجنت‌های هوشمند",
        "توسعه و طراحی وب"
      ],
      "description": "A collaborative task management tool with AI-driven task prioritization and real-time updates.",
      "description_fa": "یک ابزار مدیریت وظایف تیمی با اولویت‌بندی هوشمند وظایف توسط هوش مصنوعی و به‌روزرسانی‌های آنی.",
      "image": "https://placehold.co/600x400.png",
      "tags": [
        "React",
        "Firebase",
        "AI Agents",
        "Scikit-learn",
        "Real-time"
      ],
      "links": {
        "github": "",
        "live": ""
      },
      "showcaseType": "simulator",
      "gallery": [
        "https://placehold.co/1280x720.png",
        "https://placehold.co/1280x720.png",
        "https://placehold.co/1280x720.png"
      ],
      "aiPromptContext": "",
      "about": "This app helps teams manage their tasks intelligently. An AI agent analyzes task descriptions, deadlines, and dependencies to suggest priorities and optimal workflows. It features real-time collaboration, notifications, and progress tracking.",
      "about_fa": "این برنامه به تیم‌ها کمک می‌کند تا وظایف خود را هوشمندانه مدیریت کنند. یک ایجنت هوش مصنوعی توضیحات، مهلت‌ها و وابستگی‌های وظایف را تحلیل کرده و اولویت‌ها و گردش کارهای بهینه را پیشنهاد می‌دهد. این برنامه دارای قابلیت همکاری آنی، اعلان‌ها و پیگیری پیشرفت است.",
      "technical_details": "The application is built using React for the frontend and Firebase (Firestore and Realtime Database) for the backend and real-time data synchronization. The AI agent for task prioritization is a custom model built with Scikit-learn, deployed as a cloud function.",
      "technical_details_fa": "اپلیکیشن با استفاده از React برای فرانت‌اند و Firebase (Firestore و Realtime Database) برای بک‌اند و همگام‌سازی آنی داده‌ها ساخته شده است. ایجنت هوش مصنوعی برای اولویت‌بندی وظایف، یک مدل سفارشی ساخته‌شده با Scikit-learn است که به عنوان یک Cloud Function مستقر شده است.",
      "challenges": "Ensuring real-time updates across all clients without performance degradation was a key challenge. We optimized our Firestore queries and data structures extensively and used the Realtime Database for presence indicators.",
      "challenges_fa": "اطمینان از به‌روزرسانی‌های آنی در تمام کلاینت‌ها بدون کاهش عملکرد، یک چالش کلیدی بود. ما کوئری‌های Firestore و ساختارهای داده خود را به طور گسترده بهینه‌سازی کردیم و از Realtime Database برای نشانگرهای حضور آنلاین استفاده کردیم.",
      "solution": "By leveraging Firebase's strengths, we achieved a highly responsive and scalable real-time system. The AI agent operates independently in the background, pushing priority updates to clients without interrupting their workflow.",
      "solution_fa": "با بهره‌گیری از نقاط قوت Firebase، ما به یک سیستم آنی بسیار واکنش‌گرا و مقیاس‌پذیر دست یافتیم. ایجنت هوش مصنوعی به طور مستقل در پس‌زمینه عمل می‌کند و به‌روزرسانی‌های اولویت را بدون ایجاد وقفه در گردش کار کاربران به آن‌ها ارسال می‌کند.",
      "code_snippet": "import { TaskPrioritizerAgent } from '@/lib/ai/tasks';",
      "code_snippet_fa": "import { TaskPrioritizerAgent } from '@/lib/ai/tasks';"
    },
    {
      "title": "AI Portfolio Website",
      "title_fa": "وب‌سایت پورتفولیو با هوش مصنوعی",
      "slug": "ai-portfolio-website",
      "categories": [
        "Web Development & Design"
      ],
      "categories_fa": [
        "توسعه و طراحی وب"
      ],
      "description": "A personal portfolio to showcase AI projects and skills, built with a focus on performance and aesthetics.",
      "description_fa": "یک پورتفolio شخصی برای نمایش پروژه‌ها و مهارت‌های مرتبط با هوش مصنوعی، ساخته شده با تمرکز بر عملکرد و زیبایی.",
      "image": "https://placehold.co/600x400.png",
      "tags": [
        "Next.js",
        "Tailwind CSS",
        "Framer Motion",
        "Vercel"
      ],
      "links": {
        "github": "https://github.com/Emad211",
        "live": "#"
      },
      "showcaseType": "links",
      "gallery": [],
      "aiPromptContext": "",
      "about": "This is the very portfolio website you are looking at. It's designed to be a clean, modern, and performant platform to showcase my work in the field of AI and software development. It features a bilingual interface (English/Persian) and a content management system for projects and blog posts.",
      "about_fa": "این همان وب‌سایت پورتفولیویی است که در حال مشاهده آن هستید. این سایت به عنوان یک پلتفرم تمیز، مدرن و با کارایی بالا برای نمایش کارهای من در زمینه هوش مصنوعی و توسعه نرم‌افزار طراحی شده است. این سایت دارای یک رابط کاربری دوزبانه (انگلیسی/فارسی) و یک سیستم مدیریت محتوا برای پروژه‌ها و پست‌های وبلاگ است.",
      "technical_details": "Built with Next.js App Router for optimal performance and SEO. Styled with Tailwind CSS and ShadCN UI components for a consistent and modern look. Interactive elements are enhanced with Framer Motion. The entire application is statically generated where possible and deployed on Vercel.",
      "technical_details_fa": "با Next.js App Router برای عملکرد و سئوی بهینه ساخته شده است. با Tailwind CSS و کامپوننت‌های ShadCN UI برای ظاهری یکپارچه و مدرن استایل‌دهی شده است. عناصر تعاملی با Framer Motion بهبود یافته‌اند. کل برنامه تا حد امکان به صورت استاتیک تولید و بر روی Vercel مستقر شده است.",
      "challenges": "A major challenge was creating a fully functional admin panel from scratch that could manage the bilingual content of the portfolio without a traditional database, relying instead on updating a JSON file on the server.",
      "challenges_fa": "یک چالش بزرگ، ایجاد یک پنل مدیریت کاملاً کاربردی از ابتدا بود که بتواند محتوای دوزبانه پورتفولیو را بدون یک پایگاه داده سنتی مدیریت کند و در عوض به به‌روزرسانی یک فایل JSON روی سرور متکی باشد.",
      "solution": "I implemented a system using Next.js Server Actions that read from and write to a local JSON file. This acts as a simple, file-based CMS, allowing for easy content updates through the admin dashboard, which then triggers revalidation of static paths to reflect changes instantly.",
      "solution_fa": "من یک سیستم با استفاده از Next.js Server Actions پیاده‌سازی کردم که از یک فایل JSON محلی می‌خواند و در آن می‌نویسد. این سیستم به عنوان یک CMS ساده و مبتنی بر فایل عمل می‌کند و امکان به‌روزرسانی آسان محتوا از طریق داشبورد مدیریت را فراهم می‌کند، که سپس باعث اعتبارسنجی مجدد مسیرهای استاتیک برای انعکاس فوری تغییرات می‌شود.",
      "code_snippet": "import { getProjects } from '@/lib/actions';",
      "code_snippet_fa": "import { getProjects } from '@/lib/actions';"
    },
    {
      "title": "Deep Learning Weather Forecaster",
      "title_fa": "پیش‌بینی وضع هوا با یادگیری عمیق",
      "slug": "dl-weather-app",
      "categories": [
        "AI Model Development",
        "Data Analysis & Statistics"
      ],
      "categories_fa": [
        "توسعه مدل‌های هوش مصنوعی",
        "تحلیل داده و آمار"
      ],
      "description": "A weather application that uses deep learning models to provide highly accurate, long-term weather forecasts.",
      "description_fa": "یک اپلیکیشن هواشناسی که از مدل‌های یادگیری عمیق برای ارائه پیش‌بینی‌های بلندمدت و بسیار دقیق استفاده می‌کند.",
      "image": "https://placehold.co/600x400.png",
      "tags": [
        "Python",
        "TensorFlow",
        "Keras",
        "Flask",
        "API"
      ],
      "links": {
        "github": "",
        "live": ""
      },
      "showcaseType": "ai_chatbot",
      "gallery": [],
      "aiPromptContext": "This project is a sophisticated weather forecasting application that leverages a Long Short-Term Memory (LSTM) deep learning model, implemented with TensorFlow and Keras. The primary goal was to achieve higher accuracy in long-range weather predictions compared to traditional models. The model was trained on a massive historical weather dataset spanning over 20 years, including variables like temperature, humidity, wind speed, and pressure. A Flask API was developed to serve the model's predictions, which can be integrated into various front-end applications. One of the main challenges was handling the time-series nature of the data and preventing model overfitting, which was addressed using techniques like dropout and early stopping. The final model demonstrated a 15% improvement in accuracy for 7-day forecasts over the baseline model.",
      "about": "This project aims to provide more accurate weather forecasts using a deep learning approach. Traditional models often struggle with long-term predictions, but by using an LSTM (Long Short-Term Memory) network, this model can capture complex temporal dependencies in historical weather data.",
      "about_fa": "هدف این پروژه ارائه پیش‌بینی‌های دقیق‌تر آب و هوا با استفاده از یک رویکرد یادگیری عمیق است. مدل‌های سنتی اغلب با پیش‌بینی‌های بلندمدت مشکل دارند، اما با استفاده از یک شبکه LSTM (حافظه طولانی کوتاه‌مدت)، این مدل می‌تواند وابستگی‌های زمانی پیچیده در داده‌های تاریخی آب و هوا را ثبت کند.",
      "technical_details": "The core of the project is an LSTM model built with TensorFlow and Keras. It was trained on over 20 years of hourly weather data. The model is exposed via a REST API created with Flask. This allows any frontend application to easily fetch prediction data.",
      "technical_details_fa": "هسته اصلی پروژه یک مدل LSTM است که با TensorFlow و Keras ساخته شده. این مدل بر روی داده‌های ساعتی آب و هوای بیش از ۲۰ سال آموزش دیده است. این مدل از طریق یک REST API که با Flask ایجاد شده، در دسترس قرار گرفته است. این به هر برنامه فرانت‌اند اجازه می‌دهد تا به راحتی داده‌های پیش‌بینی را دریافت کند.",
      "challenges": "The biggest challenge was data preprocessing and feature engineering for the time-series data. Normalizing the data and creating the correct input sequences for the LSTM model was crucial. Preventing overfitting on such a large dataset was also a major concern.",
      "challenges_fa": "بزرگترین چالش، پیش‌پردازش داده‌ها و مهندسی ویژگی برای داده‌های سری زمانی بود. نرمال‌سازی داده‌ها و ایجاد توالی‌های ورودی صحیح برای مدل LSTM حیاتی بود. جلوگیری از بیش‌برازش بر روی چنین مجموعه داده بزرگی نیز یک نگرانی عمده بود.",
      "solution": "We implemented a sliding window technique to generate sequences for training. We also used dropout layers and an early stopping mechanism during training to combat overfitting. The final model showed a significant 15% improvement in accuracy for 7-day forecasts compared to a baseline ARIMA model.",
      "solution_fa": "ما یک تکنیک پنجره لغزان برای تولید توالی‌ها برای آموزش پیاده‌سازی کردیم. همچنین از لایه‌های dropout و مکانیزم توقف زودهنگام در حین آموزش برای مقابله با بیش‌برازش استفاده کردیم. مدل نهایی بهبود قابل توجه ۱۵ درصدی در دقت برای پیش‌بینی‌های ۷ روزه در مقایسه با مدل پایه ARIMA نشان داد.",
      "code_snippet": "from tensorflow.keras.models import Sequential\\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout",
      "code_snippet_fa": "from tensorflow.keras.models import Sequential\\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout"
    }
  ],
  "blogPosts": [
    {
      "title_fa": "TradingAgents",
      "content_fa": "# TradingAgents: چارچوبی برای معاملات مالی با استفاده از مدل‌های زبانی بزرگ چندعاملی\n\n## مقدمه\n\nTradingAgents یک چارچوب نوین برای معاملات سهام است که پویایی‌های مشارکتی شرکت‌های تجاری واقعی را شبیه‌سازی می‌کند. این چارچوب از مدل‌های زبانی بزرگ (LLM) برای توانمندسازی عوامل متخصص در نقش‌هایی مانند تحلیلگران بنیادی، تحلیلگران احساسات، تحلیلگران فنی و معامله‌گران با پروفایل‌های ریسک متنوع استفاده می‌کند. هدف این چارچوب بهبود عملکرد معاملات از طریق شبیه‌سازی یک محیط تجاری پویا و مشارکتی است.\n\n## ویژگی‌های کلیدی\n\n*   **مدل‌سازی سازمانی واقع‌گرایانه:** TradingAgents ساختار شرکت‌های تجاری واقعی را منعکس می‌کند و تعاملات پیچیده‌ای بین عوامل را تقویت می‌کند.\n*   **رابط‌های ارتباطی کارآمد:** این چارچوب خروجی‌های ساختاریافته را با گفتگوی زبان طبیعی برای ارتباط واضح و موثر ترکیب می‌کند.\n*   **تخصص نقش:** عوامل نقش‌های مشخص و خوش‌تعریف با اهداف خاص اختصاص داده می‌شوند که امکان تقسیم اهداف پیچیده به وظایف فرعی کوچک‌تر و قابل مدیریت را فراهم می‌کند.\n\n## نقش‌های عامل\n\nTradingAgents هفت نقش عامل متمایز را تعریف می‌کند:\n\n1.  **تحلیلگر بنیادی:** ارزیابی مالی شرکت و عملکرد سهام.\n2.  **تحلیلگر احساسات:** تجزیه و تحلیل روند احساسات رسانه‌های اجتماعی.\n3.  **تحلیلگر اخبار:** تجزیه و تحلیل روند اقتصاد جهانی که بر بازارها تاثیر می‌گذارد.\n4.  **تحلیلگر فنی:** تجزیه و تحلیل روند بازار با استفاده از شاخص‌های فنی.\n5.  **محقق:** ارزیابی پتانسیل سرمایه‌گذاری و خطرات.\n6.  **معامله‌گر:** اجرای تصمیمات معاملاتی بر اساس تجزیه و تحلیل.\n7.  **مدیریت ریسک:** نظارت و کنترل ریسک‌های بازار شرکت.\n\n### تیم تحلیل\n\nتیم تحلیل متشکل از عوامل متخصص است که مسئول جمع‌آوری و تجزیه و تحلیل انواع داده‌های بازار برای اطلاع‌رسانی به تصمیمات معاملاتی هستند. این تیم شامل تحلیلگران بنیادی، تحلیلگران احساسات، تحلیلگران اخبار و تحلیلگران فنی است.\n\n### تیم تحقیق\n\nتیم تحقیق به طور جدی اطلاعات ارائه شده توسط تیم تحلیل را ارزیابی می‌کند. این تیم شامل عواملی با دیدگاه‌های صعودی و نزولی است که در مورد خطرات و مزایای بالقوه تصمیمات سرمایه‌گذاری بحث می‌کنند.\n\n### عوامل معامله‌گر\n\nعوامل معامله‌گر تصمیمات معاملاتی را بر اساس تجزیه و تحلیل تیم‌های تحلیل و تحقیق اجرا می‌کنند.\n\n### تیم مدیریت ریسک\n\nتیم مدیریت ریسک، ریسک‌های بازار شرکت را نظارت و کنترل می‌کند.\n\n## پروتکل ارتباطی\n\nTradingAgents از یک پروتکل ارتباطی ساختاریافته برای تنظیم تعاملات عامل استفاده می‌کند و مراحل غیرضروری و خراب شدن پیام را کاهش می‌دهد. عوامل عمدتاً از طریق اسناد و نمودارهای ساختاریافته ارتباط برقرار می‌کنند و بینش‌ها را در گزارش‌های مختصر و خوش‌سازمان‌دهی شده خلاصه می‌کنند.\n\n## مدل‌های زبانی بزرگ Backbone\n\nاین چارچوب به طور استراتژیک LLMها را بر اساس نقاط قوت آنها انتخاب می‌کند. مدل‌های تفکر سریع، وظایف سریع و کم‌عمق را انجام می‌دهند، در حالی که مدل‌های تفکر عمیق در وظایف نیازمند استدلال عالی هستند. این تعادل، کارایی و عمق استدلال را تضمین می‌کند.\n\n## آزمایش‌ها و نتایج\n\nTradingAgents با استفاده از یک شبیه‌سازی جامع بک تست در میان سهام بزرگ فناوری مورد ارزیابی قرار گرفت. نتایج نشان می‌دهد که این چارچوب در بازده تجمعی، نسبت شارپ و حداکثر افت، از خطوط پایه معاملات مبتنی بر قانون موجود بهتر عمل می‌کند.\n\n```\nدسته‌ها مدل‌ها\nAAPL GOOGL AMZN\nCR%↑ ARR%↑ SR↑ MDD%↓ CR%↑ ARR%↑ SR↑ MDD%↓ CR%↑ ARR%↑ SR↑ MDD%↓\nMarket B&H -5.23 -5.09 -1.29 11.90 7.78 8.09 1.35 13.04 17.1 17.6 3.53 3.80\nRule-based\nMACD -1.49 -1.48 -0.81 4.53 6.20 6.26 2.31 1.22 - - - -\nKDJ&RSI 2.05 2.07 1.64 1.09 0.4 0.4 0.02 1.58 -0.77 -0.76 -2.25 1.08\nZMR 0.57 0.57 0.17 0.86 -0.58 0.58 2.12 2.34 -0.77 -0.77 -2.45 0.82\nSMA -3.2 -2.97 -1.72 3.67 6.23 6.43 2.12 2.34 11.01 11.6 2.22 3.97\nOurs TradingAgents 26.62 30.5 8.21 0.91 24.36 27.58 6.39 1.69 23.21 24.90 5.60 2.11\nImprovement(%) 24.57 28.43 6.57 - 16.58 19.49 4.26 - 6.10 7.30 2.07\n```\n\n## نتیجه‌گیری\n\nTradingAgents یک چارچوب امیدوارکننده برای معاملات مالی است که از LLMهای چندعاملی برای شبیه‌سازی یک محیط شرکت تجاری واقعی استفاده می‌کند. تخصص نقش، پروتکل ارتباطی کارآمد و انتخاب استراتژیک LLM به بهبود نتایج معاملات و مدیریت ریسک کمک می‌کند.\n",
      "featured_image": "https://placehold.co/1280x720.png",
      "title": "TradingAgents",
      "content": "# TradingAgents: Multi-Agent LLM Financial Trading Framework\n\n## Introduction\n\nTradingAgents is a novel stock trading framework that replicates the collaborative dynamics of real-world trading firms. It leverages Large Language Models (LLMs) to power specialized agents in roles such as fundamental analysts, sentiment analysts, technical analysts, and traders with varied risk profiles. This framework aims to improve trading performance by simulating a dynamic, collaborative trading environment.\n\n## Key Features\n\n*   **Realistic Organizational Modeling:** TradingAgents mirrors the structure of real-world trading firms, fostering complex interactions between agents.\n*   **Efficient Communication Interfaces:** The framework combines structured outputs with natural language dialogue for clear and effective communication.\n*   **Role Specialization:** Agents are assigned clear, well-defined roles with specific goals, enabling the breakdown of complex objectives into smaller, manageable subtasks.\n\n## Agent Roles\n\nTradingAgents defines seven distinct agent roles:\n\n1.  **Fundamentals Analyst:** Evaluates company financials and stock performance.\n2.  **Sentiment Analyst:** Analyzes social media sentiment trends.\n3.  **News Analyst:** Analyzes global economic trends affecting markets.\n4.  **Technical Analyst:** Analyzes market trends using technical indicators.\n5.  **Researcher:** Evaluates the investment potential and risks.\n6.  **Trader:** Executes trading decisions based on analysis.\n7.  **Risk Manager:** Monitors and controls the firm’s exposure to market risks.\n\n### Analyst Team\n\nThe Analyst Team is composed of specialized agents responsible for gathering and analyzing various types of market data to inform trading decisions. The team consists of Fundamental Analysts, Sentiment Analysts, News Analysts, and Technical Analysts.\n\n### Researcher Team\n\nThe Researcher Team critically evaluates the information provided by the Analyst Team. It comprises agents with bullish and bearish perspectives who debate the potential risks and benefits of investment decisions.\n\n### Trader Agents\n\nTrader Agents execute trading decisions based on the analysis from the Analyst and Researcher Teams.\n\n### Risk Management Team\n\nThe Risk Management Team monitors and controls the firm’s exposure to market risks.\n\n## Communication Protocol\n\nTradingAgents uses a structured communication protocol to govern agent interactions, reducing unnecessary steps and message corruption. Agents communicate primarily through structured documents and diagrams, encapsulating insights in concise, well-organized reports.\n\n## Backbone LLMs\n\nThe framework strategically selects LLMs based on their strengths. Quick-thinking models handle fast, low-depth tasks, while deep-thinking models excel in reasoning-intensive tasks. This balance ensures efficiency and depth of reasoning.\n\n## Experiments and Results\n\nTradingAgents was evaluated using a comprehensive backtesting simulation across major technology stocks. The results demonstrate that it outperforms existing rule-based trading baselines in cumulative return, Sharpe ratio, and maximum drawdown.\n\n```\nCategories Models\nAAPL GOOGL AMZN\nCR%↑ ARR%↑ SR↑ MDD%↓ CR%↑ ARR%↑ SR↑ MDD%↓ CR%↑ ARR%↑ SR↑ MDD%↓\nMarket B&H -5.23 -5.09 -1.29 11.90 7.78 8.09 1.35 13.04 17.1 17.6 3.53 3.80\nRule-based\nMACD -1.49 -1.48 -0.81 4.53 6.20 6.26 2.31 1.22 - - - -\nKDJ&RSI 2.05 2.07 1.64 1.09 0.4 0.4 0.02 1.58 -0.77 -0.76 -2.25 1.08\nZMR 0.57 0.57 0.17 0.86 -0.58 0.58 2.12 2.34 -0.77 -0.77 -2.45 0.82\nSMA -3.2 -2.97 -1.72 3.67 6.23 6.43 2.12 2.34 11.01 11.6 2.22 3.97\nOurs TradingAgents 26.62 30.5 8.21 0.91 24.36 27.58 6.39 1.69 23.21 24.90 5.60 2.11\nImprovement(%) 24.57 28.43 6.57 - 16.58 19.49 4.26 - 6.10 7.30 2.07\n```\n\n## Conclusion\n\nTradingAgents is a promising framework for financial trading that leverages multi-agent LLMs to simulate a real-world trading firm environment. Its role specialization, efficient communication protocol, and strategic LLM selection contribute to improved trading outcomes and risk management.\n",
      "slug": "tradingagents",
      "date": "2025-08-20",
      "tags": [
        "LLM",
        "Trading",
        "Multi-Agent Systems",
        "Financial Trading",
        "AI"
      ],
      "status": "published",
      "meta_title_fa": "",
      "meta_description_fa": "تریدایجنتز را بررسی کنید: چارچوبی چندعاملی مبتنی بر LLM برای شبیه‌سازی شرکت‌های تجاری واقعی، جهت بهبود معاملات مالی و مدیریت ریسک. اطلاعات بیشتر!",
      "meta_title_en": "",
      "meta_description_en": "Explore TradingAgents: A multi-agent LLM framework simulating real-world trading firms for improved financial trading and risk management. Learn more!",
      "og_image": "",
      "description_fa": "تریدایجنتز را بررسی کنید: چارچوبی چندعاملی مبتنی بر LLM برای شبیه‌سازی شرکت‌های تجاری واقعی، جهت بهبود معاملات مالی و مدیریت ریسک. اطلاعات بیشتر!",
      "description": "Explore TradingAgents: A multi-agent LLM framework simulating real-world trading firms for improved financial trading and risk management. Learn more!"
    },
    {
      "slug": "mastering-deep-learning",
      "title": "Mastering Deep Learning: A Deep Dive",
      "title_fa": "تسلط بر یادگیری عمیق: یک شیرجه عمیق",
      "description": "An in-depth guide to understanding and mastering Deep Learning for more efficient and powerful models.",
      "description_fa": "یک راهنمای عمیق برای درک و تسلط بر یادگیری عمیق برای مدل‌های کارآمدتر و قدرتمندتر.",
      "date": "2024-05-15",
      "tags": [
        "Deep Learning",
        "Python",
        "AI"
      ],
      "status": "published",
      "featured_image": "https://placehold.co/1200x630.png",
      "content": "## Understanding the Power of Deep Learning\n\nDeep Learning, a subset of machine learning, is based on artificial neural networks. It has revolutionized industries by enabling breakthroughs in areas like computer vision, natural language processing, and generative AI.\n\n### The Perceptron\n\nThe most fundamental unit is the Perceptron, a single neuron model.\n\n```python\nimport numpy as np\n\nclass Perceptron:\n    def __init__(self, learning_rate=0.01, n_iters=1000):\n        self.lr = learning_rate\n        self.n_iters = n_iters\n        self.activation_func = self._unit_step_func\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        n_samples, n_features = X.shape\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n        y_ = np.array([1 if i > 0 else 0 for i in y])\n\n        for _ in range(self.n_iters):\n            for idx, x_i in enumerate(X):\n                linear_output = np.dot(x_i, self.weights) + self.bias\n                y_predicted = self.activation_func(linear_output)\n                update = self.lr * (y_[idx] - y_predicted)\n                self.weights += update * x_i\n                self.bias += update\n\n    def predict(self, X):\n        linear_output = np.dot(X, self.weights) + self.bias\n        y_predicted = self.activation_func(linear_output)\n        return y_predicted\n\n    def _unit_step_func(self, x):\n        return np.where(x>=0, 1, 0)\n```\n\n### The useEffect Hook in React\n\nThe `useEffect` hook lets you perform side effects in functional components. It's a close replacement for `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`.\n\n- **Fetching data**: You can fetch data from an API when the component mounts.\n- **Subscribing to events**: Set up event listeners and clean them up when the component unmounts.\n- **Manually changing the DOM**: Directly interact with the DOM when needed.\n\n## Custom Solutions for Reusability\n\nOne of the most powerful features of Deep Learning is transfer learning. Pre-trained models can be used as a starting point to solve new problems. For example, a model trained on ImageNet can be fine-tuned for a specific image classification task.\n\n## Conclusion\n\nDeep Learning is a powerful tool. By understanding and using it effectively, you can build very powerful models. It is the core of modern AI.",
      "content_fa": "## درک قدرت یادگیری عمیق\n\nیادگیری عمیق، زیرمجموعه‌ای از یادگیری ماشین، بر پایه شبکه‌های عصبی مصنوعی است. این حوزه با ایجاد پیشرفت‌هایی در زمینه‌هایی مانند بینایی کامپیوتر، پردازش زبان طبیعی و هوش مصنوعی مولد، صنایع را متحول کرده است.\n\n### پرسپترون\n\nبنیادی‌ترین واحد، پرسپترون است، یک مدل تک نورونی.\n\n```python\nimport numpy as np\n\nclass Perceptron:\n    def __init__(self, learning_rate=0.01, n_iters=1000):\n        self.lr = learning_rate\n        self.n_iters = n_iters\n        self.activation_func = self._unit_step_func\n        self.weights = None\n        self.bias = None\n\n    def fit(self, X, y):\n        n_samples, n_features = X.shape\n        self.weights = np.zeros(n_features)\n        self.bias = 0\n        y_ = np.array([1 if i > 0 else 0 for i in y])\n\n        for _ in range(self.n_iters):\n            for idx, x_i in enumerate(X):\n                linear_output = np.dot(x_i, self.weights) + self.bias\n                y_predicted = self.activation_func(linear_output)\n                update = self.lr * (y_[idx] - y_predicted)\n                self.weights += update * x_i\n                self.bias += update\n\n    def predict(self, X):\n        linear_output = np.dot(X, self.weights) + self.bias\n        y_predicted = self.activation_func(linear_output)\n        return y_predicted\n\n    def _unit_step_func(self, x):\n        return np.where(x>=0, 1, 0)\n```\n\n### هوک useEffect در ری‌اکت\n\nهوک `useEffect` به شما اجازه می‌دهد تا در کامپوننت‌های تابعی، عملیات جانبی انجام دهید. این هوک جایگزین نزدیکی برای `componentDidMount`، `componentDidUpdate` و `componentWillUnmount` است.\n\n- **واکشی داده**: می‌توانید هنگام بارگذاری کامپوننت، داده‌ها را از یک API واکشی کنید.\n- **اشتراک در رویدادها**: شنونده‌های رویداد را تنظیم کرده و هنگام پیاده‌سازی کامپوننت، آن‌ها را پاک کنید.\n- **تغییر دستی در DOM**: در صورت نیاز، به طور مستقیم با DOM تعامل داشته باشید.\n\n## راه‌حل‌های سفارشی برای قابلیت استفاده مجدد\n\nیکی از قدرتمندترین ویژگی‌های یادگیری عمیق، یادگیری انتقالی است. مدل‌های از پیش آموزش‌دیده می‌توانند به عنوان نقطه شروعی برای حل مسائل جدید استفاده شوند. به عنوان مثال، مدلی که روی ImageNet آموزش دیده است، می‌تواند برای یک وظیفه طبقه‌بندی تصویر خاص، تنظیم دقیق شود.\n\n## نتیجه‌گیری\n\nیادگیری عمیق یک ابزار قدرتمند است. با درک و استفاده مؤثر از آن، می‌توانید مدل‌های بسیار قدرتمندی بسازید. این حوزه، هسته هوش مصنوعی مدرن است.",
      "meta_title_en": "A Deep Dive into Mastering Deep Learning",
      "meta_description_en": "Learn the fundamentals and advanced concepts of Deep Learning in this comprehensive guide. Perfect for beginners and experts alike.",
      "meta_title_fa": "شیرجه عمیق در تسلط بر یادگیری عمیق",
      "meta_description_fa": "در این راهنمای جامع، اصول و مفاهیم پیشرفته یادگیری عمیق را بیاموزید. مناسب برای مبتدیان و متخصصان.",
      "og_image": "https://placehold.co/1200x630.png"
    }
  ],
  "settings": {
    "en": {
      "siteName": "Emad Karimi",
      "authorName": "Emad Karimi",
      "metaTitle": "CodeCanvas | A modern portfolio for developers",
      "metaDescription": "Showcase your projects and skills with this modern, AI-powered portfolio website."
    },
    "fa": {
      "siteName": "عماد کریمی",
      "authorName": "عماد کریمی",
      "metaTitle": "کدکانواس | یک پورتفولیو مدرن برای توسعه‌دهندگان",
      "metaDescription": "پروژه‌ها و مهارت‌های خود را با این وب‌سایت پورتفولیو مدرن و مجهز به هوش مصنوعی به نمایش بگذارید."
    },
    "seo": {
      "siteURL": "https://example.com",
      "metaKeywords": "AI, Portfolio, Next.js, React, Developer",
      "twitterUsername": "emad211",
      "ogImage": "https://placehold.co/1200x630.png"
    },
    "socials": {
      "email": "emad.k50000@gmail.com",
      "github": "https://github.com/Emad211",
      "telegram": "https://t.me/Freelancer_programmerr"
    },
    "advanced": {
      "adminEmail": "admin@example.com"
    }
  }
}